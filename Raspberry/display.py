import ssd1306
import framebuf

# Definir los byte arrays para las condiciones climáticas (16x16)
condiciones = {
    "lluvia": [
          0x00,0x00,0x00,0xf0,
          0x01,0x08,0x3a,0x04,
          0x44,0x02,0x80,0x80,
          0x01,0x01,0x40,0x01,
          0x3f,0xfe,0x00,0x00,
          0x09,0x24,0x08,0x20,
          0x01,0x04,0x09,0x24,
          0x00,0x00,0x00,0x00
        ],
    "nublado": [
         0x00,0x00,0x00,0x00,
         0x00,0x00,0x00,0x00,
         0x01,0xf8,0x03,0x04,
         0x3e,0x04,0x44,0x02,
         0x40,0x02,0x40,0x02,
         0x40,0x02,0x3f,0xfc,
         0x00,0x00,0x00,0x00,
         0x00,0x00,0x00,0x00
        ],
    "despejado": [
        0x00,0x00,0x00,0x00,
        0x04,0x00,0x44,0x40,
        0x20,0x80,0x0e,0xe0,
        0xdf,0x10,0x1e,0x08,
        0x24,0x04,0x40,0x02,
        0x40,0x02,0x40,0x02,
        0x20,0x02,0x1f,0xfc,
        0x00,0x00,0x00,0x00
        ],
    "calor": [
        0x00,0x00,0x00,0x00,
        0x00,0x80,0x08,0x88,
        0x04,0x10,0x01,0xc0,
        0x03,0xe0,0x1b,0xec,
        0x03,0xe0,0x01,0xc0,
        0x04,0x10,0x08,0x88,
        0x00,0x80,0x00,0x00,
        0x00,0x00,0x00,0x00
        ],
    "frio": [
        0x00,0x00,0x00,0x80,
        0x01,0xc0,0x04,0x90,
        0x0c,0x98,0x02,0xa0,
        0x11,0xc4,0x3f,0x7e,
        0x11,0xc4,0x02,0xa0,
        0x0c,0x98,0x04,0x90,
        0x01,0xc0,0x00,0x80,
        0x00,0x00,0x00,0x00
        ],
    "viento": [
        0x00,0x00,0x00,0x08,
        0x18,0x30,0x20,0xc4,
        0x23,0x08,0x1c,0x12,
        0x00,0x24,0x00,0x48,
        0x30,0x90,0x49,0x20,
        0x52,0x40,0x44,0x58,
        0x38,0x48,0x00,0x30,
        0x00,0x00,0x00,0x00
        ],
    "normal_noche": [
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x0f,0x10,
        0x1c,0x10,0x38,0xfe,
        0x38,0x38,0x38,0x28,
        0x38,0x44,0x38,0x00,
        0x1c,0x00,0x0f,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00
        ],
    "normal_dia": [
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x0f,0xf0,
        0x10,0x08,0x27,0xe4,
        0x48,0x12,0x53,0xca,
        0x54,0x2a,0x54,0x2a,
        0x54,0x2a,0x54,0x2a,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00
        ],
    "desconocido": [
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x07,0xc0,
        0x08,0x20,0x08,0x20,
        0x08,0x20,0x01,0xe0,
        0x01,0x00,0x01,0x00,
        0x00,0x00,0x00,0x00,
        0x01,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00
        ]
}

# Definir los byte arrays para los estados (16x8)
estados = {
    "wifi": [
        0x00,0x00,0x0f,0xe0,
        0x10,0x10,0x27,0xc8,
        0x08,0x20,0x03,0x80,
        0x00,0x00,0x01,0x00
        ],
    "tx": [
        0x1f,0xf0,0x20,0x08,
        0x21,0x08,0x23,0x88,
        0x27,0xc8,0x23,0x88,
        0x1b,0x90,0x03,0x80
        ],
    "sd": [
        0x00,0x00,0x1e,0x00,
        0x11,0xf8,0x10,0x08,
        0x10,0x08,0x10,0x68,
        0x10,0x08,0x1f,0xf8
        ]
}

# Función para dibujar un bitmap en la pantalla OLED
def draw_bitmap(oled, bitmap, x, y, w, h):
    """
    Dibuja un bitmap en la pantalla OLED.
    bitmap: lista o tupla de 0/1 con al menos w*h elementos (idealmente).
    """
    buf = bytearray(bitmap)
    fb = framebuf.FrameBuffer(buf, w, h, framebuf.MONO_HLSB)
    oled.blit(fb, x, y)

# Función para mostrar los datos
def mostrar_datos(oled, temp, hum, pres, condicion, enviando=False, conectado=False, guardando=False):
    """
    Muestra la información de sensores y el estado del sistema en una pantalla OLED.

    Parámetros:
    - oled: Objeto de pantalla SSD1306.
    - temp: Temperatura (float).
    - hum: Humedad relativa (float).
    - pres: Presión atmosférica (float).
    - condicion: Clave de la condición climática para seleccionar el ícono correspondiente.
    - enviando: Bool opcional. Indica si se están enviando datos (muestra ícono TX si True).
    - conectado: Bool opcional. Indica si hay conexión WiFi (muestra ícono WiFi si True).
    - guardando: Bool opcional. Indica si se están guardando datos en SD (muestra ícono SD si True).
    """
    try:
        oled.fill(0)  # Limpiar pantalla

        # Estados 
        icon_w, icon_h = 16, 8
        espacio = 4
        iconos = []
        if conectado: iconos.append(estados["wifi"])
        if enviando: iconos.append(estados["tx"])
        if guardando: iconos.append(estados["sd"])

        # Calcular la posición de los íconos de estado
        total_w = len(iconos) * icon_w + max(len(iconos)-1, 0) * espacio
        estado_x = (oled.width - total_w) // 2
        estado_y = 8 

        # Dibujar los íconos de estado
        for estado in iconos:
            draw_bitmap(oled, estado, estado_x, estado_y, icon_w, icon_h)
            estado_x += icon_w + espacio

        # Datos
        icono = condiciones.get(condicion, condiciones["desconocido"])  # Usamos el ícono para la condición
        icono_w, icono_h = 16, 16
        datos_x = 40
        block_y = 26 

        # Icono
        icono_x = 15
        icono_y = block_y + 5
        draw_bitmap(oled, icono, icono_x, icono_y, icono_w, icono_h)

        # Dibujar los datos de temperatura, humedad y presión
        oled.text(f"T: {temp:.1f}oC", datos_x, block_y)
        oled.text(f"H: {hum:.1f}%", datos_x, block_y + 10)
        oled.text(f"P: {pres:.1f}", datos_x, block_y + 20)

        oled.show()  # Muestra todo lo dibujado en la pantalla
    except Exception as e:
        print("❌ Error en mostrar_datos:", e)
