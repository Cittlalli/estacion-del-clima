"""
Módulo para visualización en pantalla OLED con íconos de condiciones climáticas,
estados de conectividad y logotipo empresarial.

Requiere las bibliotecas:
- `ssd1306`: Controlador para pantallas OLED con protocolo I2C o SPI.
- `framebuf`: Para manejar gráficos de bajo nivel mediante buffers de imagen.

Contiene:
- Diccionarios de bitmaps para condiciones climáticas y estados del sistema.
- Función para renderizar bitmaps en pantalla.
- Función para mostrar el logotipo de la empresa.
- Función para mostrar datos meteorológicos y estados del sistema.
"""

import ssd1306
import framebuf

# Definir los byte arrays para las condiciones climáticas (16x16)
condiciones = {
    "lluvia": [
          0x00,0x00,0x00,0xf0,
          0x01,0x08,0x3a,0x04,
          0x44,0x02,0x80,0x80,
          0x01,0x01,0x40,0x01,
          0x3f,0xfe,0x00,0x00,
          0x09,0x24,0x08,0x20,
          0x01,0x04,0x09,0x24,
          0x00,0x00,0x00,0x00
        ],
    "nublado": [
         0x00,0x00,0x00,0x00,
         0x00,0x00,0x00,0x00,
         0x01,0xf8,0x03,0x04,
         0x3e,0x04,0x44,0x02,
         0x40,0x02,0x40,0x02,
         0x40,0x02,0x3f,0xfc,
         0x00,0x00,0x00,0x00,
         0x00,0x00,0x00,0x00
        ],
    "despejado": [
        0x00,0x00,0x00,0x00,
        0x04,0x00,0x44,0x40,
        0x20,0x80,0x0e,0xe0,
        0xdf,0x10,0x1e,0x08,
        0x24,0x04,0x40,0x02,
        0x40,0x02,0x40,0x02,
        0x20,0x02,0x1f,0xfc,
        0x00,0x00,0x00,0x00
        ],
    "calor": [
        0x00,0x00,0x00,0x00,
        0x00,0x80,0x08,0x88,
        0x04,0x10,0x01,0xc0,
        0x03,0xe0,0x1b,0xec,
        0x03,0xe0,0x01,0xc0,
        0x04,0x10,0x08,0x88,
        0x00,0x80,0x00,0x00,
        0x00,0x00,0x00,0x00
        ],
    "frio": [
        0x00,0x00,0x00,0x80,
        0x01,0xc0,0x04,0x90,
        0x0c,0x98,0x02,0xa0,
        0x11,0xc4,0x3f,0x7e,
        0x11,0xc4,0x02,0xa0,
        0x0c,0x98,0x04,0x90,
        0x01,0xc0,0x00,0x80,
        0x00,0x00,0x00,0x00
        ],
    "viento": [
        0x00,0x00,0x00,0x08,
        0x18,0x30,0x20,0xc4,
        0x23,0x08,0x1c,0x12,
        0x00,0x24,0x00,0x48,
        0x30,0x90,0x49,0x20,
        0x52,0x40,0x44,0x58,
        0x38,0x48,0x00,0x30,
        0x00,0x00,0x00,0x00
        ],
    "normal_noche": [
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x0f,0x10,
        0x1c,0x10,0x38,0xfe,
        0x38,0x38,0x38,0x28,
        0x38,0x44,0x38,0x00,
        0x1c,0x00,0x0f,0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00
        ],
    "normal_dia": [
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x0f,0xf0,
        0x10,0x08,0x27,0xe4,
        0x48,0x12,0x53,0xca,
        0x54,0x2a,0x54,0x2a,
        0x54,0x2a,0x54,0x2a,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00
        ],
    "desconocido": [
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x07,0xc0,
        0x08,0x20,0x08,0x20,
        0x08,0x20,0x01,0xe0,
        0x01,0x00,0x01,0x00,
        0x00,0x00,0x00,0x00,
        0x01,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00
        ]
}

# Definir los byte arrays para los estados (16x8)
estados = {
    "wifi": [
        0x00,0x00,0x0f,0xe0,
        0x10,0x10,0x27,0xc8,
        0x08,0x20,0x03,0x80,
        0x00,0x00,0x01,0x00
        ],
    "tx": [
        0x1f,0xf0,0x20,0x08,
        0x21,0x08,0x23,0x88,
        0x27,0xc8,0x23,0x88,
        0x1b,0x90,0x03,0x80
        ],
    "sd": [
        0x00,0x00,0x1e,0x00,
        0x11,0xf8,0x10,0x08,
        0x10,0x08,0x10,0x68,
        0x10,0x08,0x1f,0xf8
        ]
}

# Bitmap del logo de la empresa 
LOGO_BITMAP = [
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0x3f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xfc, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0x0f, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xe1, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0x83, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xc7, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0x00, 0x08, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x1c, 0xfe, 0xff, 0xff, 
    0xff, 0xff, 0x3f, 0x1e, 0x3e, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x9f, 0x7f, 0xf0, 0xff, 0xff, 
    0xff, 0xff, 0x8f, 0xcf, 0x7f, 0xf2, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xe7, 0xff, 0xe0, 0xff, 0xff, 
    0xff, 0xff, 0xe3, 0xf7, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xf0, 0x73, 0xfc, 0xff, 
    0xff, 0xff, 0x00, 0x00, 0xe2, 0x73, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xe0, 0x07, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x6f, 0x00, 0x01, 0x70, 0xf0, 0xff, 0xff, 0xe3, 0x67, 0x00, 0x01, 0x30, 0xe0, 0xff, 
    0xff, 0xc3, 0x63, 0xfc, 0xcf, 0x31, 0xfe, 0xff, 0xff, 0x03, 0x60, 0x80, 0xcf, 0x71, 0xe0, 0xff, 
    0xff, 0x23, 0x64, 0xfc, 0xcf, 0xf1, 0xc7, 0xff, 0xff, 0x63, 0x66, 0x80, 0xcf, 0x31, 0xc0, 0xff, 
    0xff, 0xe3, 0x67, 0x00, 0xcf, 0x31, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
]
LOGO_WIDTH = 64
LOGO_HEIGHT = 32

# Función para dibujar un bitmap en la pantalla OLED
def draw_bitmap(oled, bitmap, x, y, w, h):
    """
    Dibuja un bitmap en la pantalla OLED en la posición especificada.

    Parámetros:
    - oled: Instancia del objeto OLED (por ejemplo, ssd1306.SSD1306_I2C).
    - bitmap: Lista o bytearray con los datos del gráfico (formato MONO_HLSB).
    - x: Posición horizontal (columna) donde se dibujará el gráfico.
    - y: Posición vertical (fila) donde se dibujará el gráfico.
    - w: Ancho del gráfico en píxeles.
    - h: Alto del gráfico en píxeles.
    """
    buf = bytearray(bitmap)
    fb = framebuf.FrameBuffer(buf, w, h, framebuf.MONO_HLSB)
    oled.blit(fb, x, y)

# Función para mostrar el logo de la empresa
def mostrar_logo(oled):
    """
    Muestra el logotipo de la empresa centrado en la pantalla OLED.
    Si el bitmap está vacío o no se carga, se muestra un texto alternativo.

    Parámetros:
    - oled: Instancia del objeto OLED (por ejemplo, ssd1306.SSD1306_I2C).
    """
    oled.fill(0)
    if LOGO_BITMAP:
        x = (oled.width - LOGO_WIDTH) // 2
        y = (oled.height - LOGO_HEIGHT) // 2
        draw_bitmap(oled, LOGO_BITMAP, x, y, LOGO_WIDTH, LOGO_HEIGHT)
    else:
        # Placeholder de texto si no hay bitmap
        text = "METIS INGENIERIA Y MANTENIMIENTO"
        x = (oled.width - len(text)*8) // 2
        y = (oled.height - 8) // 2
        oled.text(text, x, y)
    oled.show()

# Función para mostrar los datos de sensores y estados
def mostrar_datos(oled, temp, hum, pres, condicion,
                  enviando=False, conectado=False, guardando=False):
    """
    Muestra los datos de sensores y los estados del sistema en pantalla OLED.

    Parámetros:
    - oled: Instancia del objeto OLED (por ejemplo, ssd1306.SSD1306_I2C).
    - temp (float): Temperatura en grados Celsius.
    - hum (float): Humedad relativa en porcentaje.
    - pres (float): Presión atmosférica.
    - condicion (str): Clave del diccionario `condiciones` para mostrar ícono climático.
    - enviando (bool): Si es True, muestra ícono de transmisión (TX).
    - conectado (bool): Si es True, muestra ícono de WiFi.
    - guardando (bool): Si es True, muestra ícono de SD.

    Maneja errores de forma segura si ocurre alguna excepción durante el dibujo.
    """
    try:
        oled.fill(0)
        # Íconos de estado
        icon_w, icon_h = 16, 8
        espacio = 4
        iconos = []
        if conectado: iconos.append(estados["wifi"])
        if enviando: iconos.append(estados["tx"])
        if guardando: iconos.append(estados["sd"])
        total_w = len(iconos)*icon_w + max(len(iconos)-1,0)*espacio
        estado_x = (oled.width - total_w)//2
        estado_y = 0
        for ico in iconos:
            draw_bitmap(oled, ico, estado_x, estado_y, icon_w, icon_h)
            estado_x += icon_w + espacio
        # Ícono de condición
        icono = condiciones.get(condicion, condiciones["desconocido"])
        draw_bitmap(oled, icono, 0, icon_h + 2, 16, 16)
        # Datos de texto
        txt_x = 20
        oled.text(f"T:{temp:.1f}C", txt_x, icon_h + 2)
        oled.text(f"H:{hum:.1f}%", txt_x, icon_h + 10)
        oled.text(f"P:{pres:.1f}",  txt_x, icon_h + 18)
        oled.show()
    except Exception as e:
        print("❌ Error en mostrar_datos:", e)
